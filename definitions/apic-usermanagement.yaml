paths:
  /users:
    post:
      tags:
        - user
      summary: Create a new instance of the model and persist it into the data source.
      operationId: user.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/user'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/user'
      deprecated: false
    get:
      tags:
        - user
      summary: Find all instances of the model matched by filter from the data source.
      operationId: user.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/user'
      deprecated: false
  '/users/{id}':
    get:
      tags:
        - user
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: user.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/user'
      deprecated: false
    delete:
      tags:
        - user
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: user.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - user
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: 'user.prototype.updateAttributes__put_users_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/user'
        - name: id
          in: path
          description: user id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/user'
      deprecated: false
    patch:
      tags:
        - user
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: 'user.prototype.updateAttributes__patch_users_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/user'
        - name: id
          in: path
          description: user id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/user'
      deprecated: false
definitions:
  user:
    properties:
      age:
        description: User age
        type: number
        format: double
      email:
        description: User e-mail
        type: string
      name:
        description: User name
        type: string
      id:
        description: User id
        type: string
    required:
      - name
      - id
    additionalProperties: false
  x-any:
    properties: {}
basePath: /api
swagger: '2.0'
info:
  x-ibm-name: apic-usermanagement
  version: 1.0.0
  title: apic-usermanagement
  description: Tutorial to create a REST API implemented with LoopBack in the IBM API Connect system.
  contact:
    name: Alberto Valverde
    email: aber866@gmail.com
    url: 'https://github.com/aber866/apic-usermanagement.git'
schemes:
  - https
host: $(catalog.host)
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  clientIdHeader:
    type: apiKey
    in: header
    name: X-IBM-Client-Id
  clientSecretHeader:
    in: header
    name: X-IBM-Client-Secret
    type: apiKey
security:
  - clientIdHeader: []
    clientSecretHeader: []
x-ibm-configuration:
  testable: true
  enforced: true
  cors:
    enabled: true
  catalogs:
    apic-dev:
      properties:
        runtime-url: $(TARGET_URL)
    sb:
      properties:
        runtime-url: 'http://localhost:4001'
  assembly:
    execute:
      - invoke:
          target-url: $(runtime-url)$(request.path)$(request.search)
